//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System.Reflection;

namespace MassActivation.Properties {
    using System;
    
    
    /// <summary>
    ///   一个强类型的资源类，用于查找本地化的字符串等。
    /// </summary>
    // 此类是由 StronglyTypedResourceBuilder
    // 类通过类似于 ResGen 或 Visual Studio 的工具自动生成的。
    // 若要添加或移除成员，请编辑 .ResX 文件，然后重新运行 ResGen
    // (以 /str 作为命令选项)，或重新生成 VS 项目。
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   返回此类使用的缓存的 ResourceManager 实例。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null))
                {
                    Assembly assembly;
#if NetCore
                    assembly = typeof (Strings).GetTypeInfo().Assembly;
#else
                    assembly = typeof (Strings).Assembly;
#endif
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MassActivation.Properties.Strings", assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   使用此强类型资源类，为所有资源查找
        ///   重写当前线程的 CurrentUICulture 属性。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   查找类似 The activator type {0} for the assembly {1} cannot be interface or abstract class. 的本地化字符串。
        /// </summary>
        internal static string Cannot_AbstractOrInterface {
            get {
                return ResourceManager.GetString("Cannot_AbstractOrInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 The activation method {0} in the type {1} cannot be generic. 的本地化字符串。
        /// </summary>
        internal static string Cannot_GenericMethod {
            get {
                return ResourceManager.GetString("Cannot_GenericMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 The following activation methods cannot be invoked: {0}. 的本地化字符串。
        /// </summary>
        internal static string Cannot_Invoke_MultipleMethod {
            get {
                return ResourceManager.GetString("Cannot_Invoke_MultipleMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 The method {0} in the activator type {1} cannot be invoke. 的本地化字符串。
        /// </summary>
        internal static string Cannot_InvokeMethod {
            get {
                return ResourceManager.GetString("Cannot_InvokeMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 There are multiple public constructors for the activator type {0}. The hosting application cannot determine which one should be used to instantiate. 的本地化字符串。
        /// </summary>
        internal static string Cannot_Multiple_PublicConstructor {
            get {
                return ResourceManager.GetString("Cannot_Multiple_PublicConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 There are multiple public activation method {0} have been found in the type {1}. The hosting application cannot determine which one should be used to invoke. 的本地化字符串。
        /// </summary>
        internal static string Cannot_Multiple_StartupMethod {
            get {
                return ResourceManager.GetString("Cannot_Multiple_StartupMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 The activator type {0} for the assembly {1} cannot be generic type. 的本地化字符串。
        /// </summary>
        internal static string Cannot_Startup_GenericType {
            get {
                return ResourceManager.GetString("Cannot_Startup_GenericType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 The activator types cannot be instantiated: {0}. 的本地化字符串。
        /// </summary>
        internal static string CannotCreateInstances {
            get {
                return ResourceManager.GetString("CannotCreateInstances", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 The parameter {0} for the instance constructor of the activator type {1} cannot be out or ref. 的本地化字符串。
        /// </summary>
        internal static string InvalidConstructorParameter {
            get {
                return ResourceManager.GetString("InvalidConstructorParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 The parameter {0} for the method {1} in the activator type {2} cannot be out or ref. 的本地化字符串。
        /// </summary>
        internal static string InvalidMethodParameter {
            get {
                return ResourceManager.GetString("InvalidMethodParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 Cannot find public instance constructor for the activator type {0}. 的本地化字符串。
        /// </summary>
        internal static string NoPublicConstructor {
            get {
                return ResourceManager.GetString("NoPublicConstructor", resourceCulture);
            }
        }
    }
}
